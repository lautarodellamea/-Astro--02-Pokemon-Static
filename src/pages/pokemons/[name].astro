---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.tesponse";

import { Icon } from "astro-icon/components";

import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";

// rutas existentes, para sitios estaticos
export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;
  // console.log("ðŸš€ ~ getStaticPaths ~ results:", results);

  // rutas dinamicas
  return results.map((pokemon) => ({
    params: { name: pokemon.name },
    props: {
      name: pokemon.name,
      url: pokemon.url,
    },
  }));

  // manual
  /* return [
    {
      params: { name: "bulbasaur" },
      // estas serian las properias de cada pagina
      props: {
        name: "bulbasaur",
        url: "https://pokeapi.co/api/v2/pokemon/1/",
      },
    },
    {
      params: { name: "charmander" },
      props: {
        name: "charmander",
        url: "https://pokeapi.co/api/v2/pokemon/4/",
      },
    },
  ]; */
}) satisfies GetStaticPaths;

// accedo a los params de la url
const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`PokÃ©mon - #${id} ${name}`}
  description={`InformaciÃ³n sobre el pokÃ©mon #${id} ${name}`}
  image={imageSrc}
>
  <section class="mt-10 flex flex-col justify-center items-center">
    <div class="flex flex-row">
      <div>
        <!-- <a href="/">Regresar</a> -->
        <button onclick="history.back()" class="text-blue-500">Regresar</button>
        <Title>{name}</Title>
      </div>

      <button id="btn-favorite" class={"ml-5"} data-name={name} data-id={id}>
        <Icon data-outline name="heart-outline" size={50} color={"#ff0000"} />
        <Icon
          data-full
          class="hidden"
          name="heart-full"
          size={50}
          color={"#ff0000"}
        />
      </button>
    </div>

    <!-- isBig={true} a esta prop no hace falta ponerle true, si no le mandamos nada es como si fuera con el true -->
    <PokemonCard name={name} url={url} isBig />

    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
    </audio>
  </section>
</MainLayout>

<script>
  // podemos usar ts en el script
  // interface FavoritePokemon {
  //   name: string;
  //   id: number;
  // }
  import type { FavoritePokemon } from "@interfaces/favorite-pokemon";


  // document.addEventListener("astro:before-preparation", () => {
  //   console.log("astro:before-preparation");
  // })
  // document.addEventListener("astro:after-preparation", () => {
  //   console.log("astro:after-preparation");
  // })
  // document.addEventListener("astro:before-swap", () => {
  //   console.log("astro:before-swap");
  // })
  // document.addEventListener("astro:after-swap", () => {
  //   console.log("astro:after-swap");
  // })
  // document.addEventListener("astro:page-load", () => {
  //   console.log("astro:page-load");
  // });

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") || "[]"
    );
    // console.log({ favoritePokemons });

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";
    // console.log(name, id);

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;
    const isFavorite = favoritePokemons.some((fav) => fav.name === name);


    if ( isFavorite ) {
      heartOutline.classList.add("hidden");
      heartFull.classList.remove("hidden");
    }


    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        // remover
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        // agregar
        favoritePokemons.push({ name: name, id: +id });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };


    btnFavorite.addEventListener("click", () => {
      // console.log({ name, id });

      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  // https://docs.astro.build/en/guides/view-transitions/#lifecycle-events
  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  a {
    @apply text-blue-500 hover:underline;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
